version: '3.4'

services:
  localstack:
    container_name: "aws-localstack"
    image: localstack/localstack
    ports:
      - "4566:4566"
      - "4571:4571"
      #- "${PORT_WEB_UI-8080}:${PORT_WEB_UI-8080}"
    environment:
      - SERVICES=${SERVICES- }
      - DEBUG=${DEBUG- }
      - DATA_DIR=/tmp/localstack/data
      #- PORT_WEB_UI=${PORT_WEB_UI- }
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
      - KINESIS_ERROR_PROBABILITY=${KINESIS_ERROR_PROBABILITY- }
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST_TMP_FOLDER=${TMPDIR}
    volumes:
      - "localstack-vol:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      vpc:
        ipv4_address: 172.20.128.2
  nifi:
    container_name: nifi
    image: apache/nifi:latest
    ports:
      # HTTP
      - 8080:8080/tcp
      # HTTPS
      - 8443:8443/tcp
      # Remote Input Socket
      - 10000:10000/tcp
      # JVM Debugger
      - 8000:8000/tcp
      # Cluster Node Protocol
      #- 11443:11443/tcp
    environment:
      - NIFI_HOME=/home/nifi
      - NIFI_LOG_DIR=/home/nifi/logs
    volumes:
      - nifi_data:/home/nifi
    networks:
      vpc:
        ipv4_address: 172.20.128.3
  db:
    container_name: db_transacional
    image: postgres
    environment:
      POSTGRES_PASSWORD: "test"
    ports:
      - "15432:5432"
    volumes:
      - /home/joao/volumes-containers/postgres:/var/lib/postgresql/data 
    networks:
      vpc:
        ipv4_address: 172.20.128.4
  dw:
    container_name: data_warehouse
    image: postgres
    environment:
      POSTGRES_PASSWORD: "test"
    ports:
      - "15433:5432"
    volumes:
      - /home/joao/volumes-containers/dw:/var/lib/postgresql/data 
    networks:
      vpc:
        ipv4_address: 172.20.128.5
  metabase:
     container_name: metabase
     image: metabase/metabase
     environment:
       - MB_DB_FILE=/metabase-data/metabase.db    
     ports:
       - 3000:3000
     volumes:
       - /home/joao/volumes-containers/metabase-data:/metabase-data
     networks:
      vpc:
        ipv4_address: 172.20.128.6
  zeppelin:
     container_name: zeppelin
     image: apache/zeppelin:0.9.0
     ports:
       - 8081:8080
     networks:
      vpc:
        ipv4_address: 172.20.128.7  
  neo4j:
      image: neo4j:3.5.26
      container_name: neo4j_amundsen
      environment:
        - NEO4J_AUTH=neo4j/test
      ulimits:
        nofile:
          soft: 40000
          hard: 40000
      ports:
          - 7474:7474
          - 7687:7687
      volumes:
          - ./example/docker/neo4j/conf:/var/lib/neo4j/conf
          - ./example/docker/neo4j/plugins:/var/lib/neo4j/plugins
          - ./example/backup:/backup
          - neo4j_data:/data
      networks:
        vpc:
          ipv4_address: 172.20.128.8
  elasticsearch:
      image: elasticsearch:6.7.0
      container_name: es_amundsen
      ports:
          - 9200:9200
      volumes:
        - es_data:/usr/share/elasticsearch/data
      networks:
        vpc:
          ipv4_address: 172.20.128.9
      ulimits:
        nofile:
          soft: 65536
          hard: 65536
  amundsensearch:
      image: amundsendev/amundsen-search:2.4.1
      container_name: amundsensearch
      ports:
        - 5001:5000
      depends_on:
        - elasticsearch
      networks:
        vpc:
          ipv4_address: 172.20.128.10
      environment:
        - PROXY_ENDPOINT=es_amundsen
      command: gunicorn -w 2 --bind :5000 search_service.search_wsgi
  amundsenmetadata:
      image: amundsendev/amundsen-metadata:3.3.0
      container_name: amundsenmetadata
      depends_on:
        - neo4j
      ports:
        - 5002:5000
      networks:
        vpc:
          ipv4_address: 172.20.128.11
      environment:
         - PROXY_HOST=bolt://neo4j_amundsen
      command: gunicorn -w 2 --bind :5000 metadata_service.metadata_wsgi
  amundsenfrontend:
      image: amundsendev/amundsen-frontend:3.1.0
      container_name: amundsenfrontend
      depends_on:
        - amundsenmetadata
        - amundsensearch
      ports:
        - 5000:5000
      networks:
        vpc:
          ipv4_address: 172.20.128.12
      environment:
        - SEARCHSERVICE_BASE=http://amundsensearch:5000
        - METADATASERVICE_BASE=http://amundsenmetadata:5000
        # Only for easy config-less Quickstart bookmark evalutation. `TestConfig` extends ordinary `LocalConfig` by
        # defining `AUTH_USER_METHOD` to a hardcoded dummy user in `amundsen_application.tests.test_utils.get_test_user()`
        # See further docs in https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/configuration.md#flask
        # and https://github.com/amundsen-io/amundsenfrontendlibrary/blob/master/docs/configuration.md#authentication
        - FRONTEND_SVC_CONFIG_MODULE_CLASS=amundsen_application.config.TestConfig
      command: gunicorn -w 2 --bind :5000 amundsen_application.wsgi

volumes:
  nifi_data:
    external: true
  localstack-vol:    
  es_data:
  neo4j_data:
networks:
  vpc:
    ipam:
      config:
        - subnet: 172.20.0.0/16
