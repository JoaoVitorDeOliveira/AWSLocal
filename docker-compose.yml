version: '3.4'

services:
  localstack:
    container_name: "aws-localstack"
    image: localstack/localstack
    networks:
      - aws-local
    ports:
      - "4566:4566"
      - "4571:4571"
      #- "${PORT_WEB_UI-8080}:${PORT_WEB_UI-8080}"
    environment:
      - SERVICES=${SERVICES- }
      - DEBUG=${DEBUG- }
      - DATA_DIR=${DATA_DIR- }
      #- PORT_WEB_UI=${PORT_WEB_UI- }
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
      - KINESIS_ERROR_PROBABILITY=${KINESIS_ERROR_PROBABILITY- }
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOST_TMP_FOLDER=${TMPDIR}
    volumes:
      - "/home/joao/volumes-containers/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
  nifi:
    container_name: nifi
    image: apache/nifi:latest
    ports:
      # HTTP
      - 8080:8080/tcp
      # HTTPS
      - 8443:8443/tcp
      # Remote Input Socket
      - 10000:10000/tcp
      # JVM Debugger
      - 8000:8000/tcp
      # Cluster Node Protocol
      #- 11443:11443/tcp
    environment:
      - NIFI_HOME=/home/nifi
      - NIFI_LOG_DIR=/home/nifi/logs
    volumes:
      - nifi_data:/home/nifi
    networks:
      - aws-local
  db:
    container_name: db_transacional
    image: postgres
    environment:
      POSTGRES_PASSWORD: "test"
    ports:
      - "15432:5432"
    volumes:
      - /home/joao/volumes-containers/postgres:/var/lib/postgresql/data 
    networks:
      - aws-local
  dw:
    container_name: data_warehouse
    image: postgres
    environment:
      POSTGRES_PASSWORD: "test"
    ports:
      - "15433:5432"
    volumes:
      - /home/joao/volumes-containers/dw:/var/lib/postgresql/data 
    networks:
      - aws-local
  metabase:
     container_name: metabase
     image: metabase/metabase
     environment:
       - MB_DB_FILE=/metabase-data/metabase.db    
     ports:
       - 3000:3000
     volumes:
       - /home/joao/volumes-containers/metabase-data:/metabase-data
     networks:
       - aws-local
  zeppelin:
     container_name: zeppelin
     image: apache/zeppelin:0.9.0
     ports:
       - 8081:8080
     networks:
       - aws-local       
volumes:
  nifi_data:
    external: true
         
networks:
  aws-local:
    driver: bridge
